name: Client_Docker Test When commit.yml

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./YuYuWechatV2_Client

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: ls
        run: ls

      - name: pwd
        run: pwd

      - name: Build and run Docker containers
        run: docker-compose -f "./GitHub Action Build Docker.yml" up -d --build

      - name: Wait for the server to start
        run: sleep 20

      - name: Display Docker logs
        run: docker-compose -f "./GitHub Action Build Docker.yml" logs

      # Test endpoints without login
      - name: Test main endpoint without login
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:7500/home/)
          if [ $response -ne 302 ]; then
            echo "Main endpoint accessible without login, expected it to be protected."
            exit 1
          fi

      # Create a superuser
      - name: Create superuser
        run: |
          docker exec -e DJANGO_SUPERUSER_PASSWORD="12345" yuyuwechatv2_client python manage.py createsuperuser --no-input --username testuser --email testuser@example.com

      # Login and store session cookies and CSRF token
      - name: Login and store session cookies
        run: |
          curl -c cookies.txt -s -d "username=testuser&password=12345" -X POST http://127.0.0.1:7500/login/
          csrf_token=$(grep -oP 'csrftoken=\K[^;]+' cookies.txt)

      # Test endpoints with login and CSRF token
      - name: Test main endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/

      - name: Test get_server_ip endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/get_server_ip/

      - name: Test set_server_ip endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail -X POST -H "Content-Type: application/json" -d '{"server_ip": "127.0.0.1"}' http://127.0.0.1:7500/set_server_ip/

      - name: Test schedule_management endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/schedule_management/

      - name: Test send_message_management endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/send_message_management/

      - name: Test start_celery endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail -X POST http://127.0.0.1:7500/start_celery/

      - name: Wait for the celery to start
        run: sleep 5

      - name: Test check_celery_running endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/check_celery_running/

      - name: Test stop_celery endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/stop_celery/

      - name: Test check_wechat_status endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/check_wechat_status/

      - name: Test log_view endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/logs/

      - name: Test log_counts endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/log_counts/

      - name: Test clear_logs endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail -X POST http://127.0.0.1:7500/clear_logs/

      - name: Test error_detection_view endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/error_detection/

      - name: Test check_errors endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail http://127.0.0.1:7500/check_errors/

      - name: Test export_database endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail -X POST http://127.0.0.1:7500/export_database/ -o db_backup.json

      - name: Test import_database endpoint with login and csrf token
        run: |
          curl -b cookies.txt -H "X-CSRFToken: $csrf_token" --fail -F "db_file=@db_backup.json" http://127.0.0.1:7500/import_database/